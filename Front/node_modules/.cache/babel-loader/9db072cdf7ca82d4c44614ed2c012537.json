{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aponc\\\\OneDrive\\\\Desktop\\\\Proyecto\\\\Front\\\\src\\\\components\\\\cart\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState(() => {\n    const storedCart = localStorage.getItem('cartItems');\n    return storedCart ? JSON.parse(storedCart) : [];\n  });\n\n  // Asegura que localStorage se mantenga actualizado con los cambios en cartItems\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n  const updateCart = items => {\n    try {\n      if (!Array.isArray(items)) {\n        throw new Error(\"El carrito debe ser un array.\");\n      }\n      setCartItems(items); // Esto ahora se maneja en useEffect\n    } catch (error) {\n      console.error(\"Error actualizando el carrito:\", error);\n    }\n  };\n  const addToCart = item => {\n    try {\n      setCartItems(prevCartItems => {\n        const isReservation = item.codigoMesaReserva !== undefined;\n        let updatedItems;\n        if (isReservation) {\n          // Si es una reserva, solo agregarla al carrito\n          updatedItems = [...prevCartItems, item];\n        } else {\n          // Si es un producto, verificar si ya existe en el carrito\n          const existingItemIndex = prevCartItems.findIndex(cartItem => cartItem.idAlimento === item.idAlimento);\n          if (existingItemIndex !== -1) {\n            // Actualizar cantidad si el producto ya existe en el carrito\n            const updatedItem = {\n              ...prevCartItems[existingItemIndex],\n              quantity: prevCartItems[existingItemIndex].quantity + item.quantity\n            };\n            updatedItems = [...prevCartItems.slice(0, existingItemIndex), updatedItem, ...prevCartItems.slice(existingItemIndex + 1)];\n          } else {\n            // Si el producto no existe, añadirlo al carrito\n            const newItem = {\n              ...item,\n              quantity: item.quantity\n            };\n            updatedItems = [...prevCartItems, newItem];\n          }\n        }\n        console.log(\"Updated Cart Items:\", updatedItems); // Log para depuración\n        return updatedItems;\n      });\n    } catch (error) {\n      console.error(\"Error agregando al carrito:\", error);\n    }\n  };\n  const removeFromCart = (itemId, quantityToRemove) => {\n    try {\n      setCartItems(prevCartItems => {\n        const updatedItems = prevCartItems.reduce((acc, item) => {\n          if (item.idAlimento === itemId) {\n            const newQuantity = item.quantity - quantityToRemove;\n            if (newQuantity > 0) {\n              acc.push({\n                ...item,\n                quantity: newQuantity\n              });\n            }\n          } else if (item.codigoMesaReserva !== itemId) {\n            // Si es una reserva, solo eliminarla si el ID coincide con `codigoMesaReserva`\n            acc.push(item);\n          }\n          return acc;\n        }, []);\n        console.log(\"Cart Items after removal:\", updatedItems); // Log para depuración\n        return updatedItems;\n      });\n    } catch (error) {\n      console.error(\"Error eliminando del carrito:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"ROIRS8zxmD2vCsJ9B6yMm3slUss=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","storedCart","localStorage","getItem","JSON","parse","setItem","stringify","updateCart","items","Array","isArray","Error","error","console","addToCart","item","prevCartItems","isReservation","codigoMesaReserva","undefined","updatedItems","existingItemIndex","findIndex","cartItem","idAlimento","updatedItem","quantity","slice","newItem","log","removeFromCart","itemId","quantityToRemove","reduce","acc","newQuantity","push","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/aponc/OneDrive/Desktop/Proyecto/Front/src/components/cart/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n    const [cartItems, setCartItems] = useState(() => {\n        const storedCart = localStorage.getItem('cartItems');\n        return storedCart ? JSON.parse(storedCart) : [];\n    });\n\n    // Asegura que localStorage se mantenga actualizado con los cambios en cartItems\n    useEffect(() => {\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n    }, [cartItems]);\n\n    const updateCart = (items) => {\n        try {\n            if (!Array.isArray(items)) {\n                throw new Error(\"El carrito debe ser un array.\");\n            }\n            setCartItems(items); // Esto ahora se maneja en useEffect\n        } catch (error) {\n            console.error(\"Error actualizando el carrito:\", error);\n        }\n    };\n\n    const addToCart = (item) => {\n        try {\n            setCartItems((prevCartItems) => {\n                const isReservation = item.codigoMesaReserva !== undefined;\n                let updatedItems;\n\n                if (isReservation) {\n                    // Si es una reserva, solo agregarla al carrito\n                    updatedItems = [...prevCartItems, item];\n                } else {\n                    // Si es un producto, verificar si ya existe en el carrito\n                    const existingItemIndex = prevCartItems.findIndex(cartItem => cartItem.idAlimento === item.idAlimento);\n                    if (existingItemIndex !== -1) {\n                        // Actualizar cantidad si el producto ya existe en el carrito\n                        const updatedItem = {\n                            ...prevCartItems[existingItemIndex],\n                            quantity: prevCartItems[existingItemIndex].quantity + item.quantity\n                        };\n                        updatedItems = [\n                            ...prevCartItems.slice(0, existingItemIndex),\n                            updatedItem,\n                            ...prevCartItems.slice(existingItemIndex + 1)\n                        ];\n                    } else {\n                        // Si el producto no existe, añadirlo al carrito\n                        const newItem = { ...item, quantity: item.quantity };\n                        updatedItems = [...prevCartItems, newItem];\n                    }\n                }\n\n                console.log(\"Updated Cart Items:\", updatedItems); // Log para depuración\n                return updatedItems;\n            });\n        } catch (error) {\n            console.error(\"Error agregando al carrito:\", error);\n        }\n    };\n\n    const removeFromCart = (itemId, quantityToRemove) => {\n        try {\n            setCartItems((prevCartItems) => {\n                const updatedItems = prevCartItems.reduce((acc, item) => {\n                    if (item.idAlimento === itemId) {\n                        const newQuantity = item.quantity - quantityToRemove;\n                        if (newQuantity > 0) {\n                            acc.push({ ...item, quantity: newQuantity });\n                        }\n                    } else if (item.codigoMesaReserva !== itemId) {\n                        // Si es una reserva, solo eliminarla si el ID coincide con `codigoMesaReserva`\n                        acc.push(item);\n                    }\n                    return acc;\n                }, []);\n\n                console.log(\"Cart Items after removal:\", updatedItems); // Log para depuración\n                return updatedItems;\n            });\n        } catch (error) {\n            console.error(\"Error eliminando del carrito:\", error);\n        }\n    };\n\n    return (\n        <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\n            {children}\n        </CartContext.Provider>\n    );\n};\n\nexport const useCart = () => {\n    return useContext(CartContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}